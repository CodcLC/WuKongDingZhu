CCEffect %{
  techniques: 
    - 
      passes: 
        - 
          blendState: 
            targets: 
              - 
                blend: true
          rasterizerState: 
            cullMode: 0
          properties: 
            texture: 
              value: "white"
            alphaThreshold: 
              value: 
                - 0.5
            outlineWidth: 
              value: 
                - 0.5
          vert: "vs"
          frag: "fs"

    }%
    
    CCProgram vs %{
        
precision highp float;
#include <cc-global>

#include <cc-local>

in vec3 a_position;
in vec4 a_color;
out vec4 v_color;
#if USE_TEXTURE
in vec2 a_uv0;
out vec2 v_uv0;
#endif
void main () {
  vec4 pos = vec4(a_position, 1);
  #if CC_USE_MODEL
  pos = cc_matViewProj * cc_matWorld * pos;
  #else
  pos = cc_matViewProj * pos;
  #endif
  #if USE_TEXTURE
  v_uv0 = a_uv0;
  #endif
  v_color = a_color;
  gl_Position = pos;
}
    }%
    
    CCProgram fs %{
        
precision highp float;
#if USE_ALPHA_TEST
  uniform ALPHA_TEST {
    float alphaThreshold;
  };
#endif
void ALPHA_TEST (in vec4 color) {
  #if USE_ALPHA_TEST
      if (color.a < alphaThreshold) discard;
  #endif
}
void ALPHA_TEST (in float alpha) {
  #if USE_ALPHA_TEST
      if (alpha < alphaThreshold) discard;
  #endif
}
uniform CCGlobal {
  mat4 cc_matView;
  mat4 cc_matViewInv;
  mat4 cc_matProj;
  mat4 cc_matProjInv;
  mat4 cc_matViewProj;
  mat4 cc_matViewProjInv;
  vec4 cc_cameraPos;
  vec4 cc_time;
  mediump vec4 cc_screenSize;
  mediump vec4 cc_screenScale;
};
in vec4 v_color;
#if USE_TEXTURE
in vec2 v_uv0;
uniform sampler2D texture;
#endif
uniform InputData{
  float outlineWidth;
};
bool checkIsMakeOutline(vec2 pos){
  float alpha = 0.5;
  vec4 color = texture(texture, pos);
  if(color.a >= alpha || outlineWidth == 0.0)return false;
  color = texture2D(texture, pos + vec2(0, outlineWidth));
  if(color.a >= alpha)return true;
  color = texture2D(texture, pos + vec2(outlineWidth, outlineWidth));
  if(color.a >= alpha)return true;
  color = texture2D(texture, pos + vec2(outlineWidth, 0));
  if(color.a >= alpha)return true;
  color = texture2D(texture, pos + vec2(outlineWidth, -outlineWidth));
  if(color.a >= alpha)return true;
  color = texture2D(texture, pos + vec2(0, -outlineWidth));
  if(color.a >= alpha)return true;
  color = texture2D(texture, pos + vec2(-outlineWidth, -outlineWidth));
  if(color.a >= alpha)return true;
  color = texture2D(texture, pos + vec2(-outlineWidth, 0));
  if(color.a >= alpha)return true;
  color = texture2D(texture, pos + vec2(-outlineWidth, outlineWidth));
  if(color.a >= alpha)return true;
  return false;
}
void main () {
  vec4 o = vec4(1, 1, 1, 1);
  #if USE_TEXTURE
  o *= texture(texture, v_uv0);
    #if CC_USE_ALPHA_ATLAS_TEXTURE
    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    #endif
  #endif
  o *= v_color;
  ALPHA_TEST(o);
  if(checkIsMakeOutline(v_uv0)){
    o = vec4(1, 0.95, 0, 1);
  }
  gl_FragColor = o;
}
    }%
    