CCEffect %{
  techniques: 
    - 
      passes: 
        - 
          blendState: 
            targets: 
              - 
                blend: true
          rasterizerState: 
            cullMode: 0
          properties: 
            texture: 
              value: "white"
            alphaThreshold: 
              value: 
                - 0.5
          vert: "vs"
          frag: "fs"

    }%
    
    CCProgram vs %{
        
precision highp float;
#include <cc-global>

#include <cc-local>

in vec3 a_position;
in vec4 a_color;
out vec4 v_color;
#if USE_TEXTURE
in vec2 a_uv0;
out vec2 v_uv0;
#endif
void main () {
  vec4 pos = vec4(a_position, 1);
  #if CC_USE_MODEL
  pos = cc_matViewProj * cc_matWorld * pos;
  #else
  pos = cc_matViewProj * pos;
  #endif
  #if USE_TEXTURE
  v_uv0 = a_uv0;
  #endif
  v_color = a_color;
  gl_Position = pos;
}
    }%
    
    CCProgram fs %{
        
  precision highp float;
#if USE_ALPHA_TEST
  uniform ALPHA_TEST {
    float alphaThreshold;
  };
#endif
void ALPHA_TEST (in vec4 color) {
  #if USE_ALPHA_TEST
      if (color.a < alphaThreshold) discard;
  #endif
}
void ALPHA_TEST (in float alpha) {
  #if USE_ALPHA_TEST
      if (alpha < alphaThreshold) discard;
  #endif
}
  in vec4 v_color;
  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  float getColorAlpha(float angle, float dist) {
    float radian = radians(angle);
    vec4 color = getTextureColor(texture, v_uv0 + vec2(dist * cos(radian), dist * sin(radian)));
    return color.a;
  }
  float getAverageAlpha(float dist) {
    float totalAlpha = 0.0;
    totalAlpha += getColorAlpha(0.0, dist);
    totalAlpha += getColorAlpha(30.0, dist);
    totalAlpha += getColorAlpha(60.0, dist);
    totalAlpha += getColorAlpha(90.0, dist);
    totalAlpha += getColorAlpha(120.0, dist);
    totalAlpha += getColorAlpha(150.0, dist);
    totalAlpha += getColorAlpha(180.0, dist);
    totalAlpha += getColorAlpha(210.0, dist);
    totalAlpha += getColorAlpha(240.0, dist);
    totalAlpha += getColorAlpha(270.0, dist);
    totalAlpha += getColorAlpha(300.0, dist);
    totalAlpha += getColorAlpha(330.0, dist);
    return totalAlpha * 0.0833;
  }
  float getGlowAlpha() {
    if (glowColorSize == 0.0) {
      return 0.0;
    }
    vec4 srcColor = getTextureColor(texture, v_uv0);
    if (srcColor.a <= glowThreshold) {
      return srcColor.a;
    }
    float totalAlpha = 0.0;
    totalAlpha += getAverageAlpha(glowColorSize * 0.1);
    totalAlpha += getAverageAlpha(glowColorSize * 0.2);
    totalAlpha += getAverageAlpha(glowColorSize * 0.3);
    totalAlpha += getAverageAlpha(glowColorSize * 0.4);
    totalAlpha += getAverageAlpha(glowColorSize * 0.5);
    totalAlpha += getAverageAlpha(glowColorSize * 0.6);
    totalAlpha += getAverageAlpha(glowColorSize * 0.7);
    totalAlpha += getAverageAlpha(glowColorSize * 0.8);
    totalAlpha += getAverageAlpha(glowColorSize * 0.9);
    totalAlpha += getAverageAlpha(glowColorSize * 1.0);
    return totalAlpha * 0.1;
  }
  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
  vec4 texture_tmp = texture(texture, v_uv0);
  #if CC_USE_ALPHA_ATLAS_texture
      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;
  #endif
  #if INPUT_IS_GAMMA
    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);
    o.a *= texture_tmp.a;
  #else
    o *= texture_tmp;
  #endif
    #endif
    o *= v_color;
float alpha = getGlowAlpha();
gl_FragColor = o;
    ALPHA_TEST(o);
    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
    }%
    