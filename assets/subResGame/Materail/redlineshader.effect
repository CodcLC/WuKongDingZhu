CCEffect %{
  techniques: 
    - 
      passes: 
        - 
          blendState: 
            targets: 
              - 
                blend: true
          rasterizerState: 
            cullMode: 0
          properties: 
            texture: 
              value: "white"
            alphaThreshold: 
              value: 
                - 0.5
            imgColor: 
              value: 
                - 255
                - 0
                - 255
                - 255
              editor: 
            radius: 
              value: 
                - 0.01
          vert: "vs"
          frag: "fs"

    }%
    
    CCProgram vs %{
        
precision highp float;
#include <cc-global>

#include <cc-local>

in vec3 a_position;
in vec4 a_color;
out vec4 v_color;
#if USE_TEXTURE
in vec2 a_uv0;
out vec2 v_uv0;
#endif
void main () {
  vec4 pos = vec4(a_position, 1);
  #if CC_USE_MODEL
  pos = cc_matViewProj * cc_matWorld * pos;
  #else
  pos = cc_matViewProj * pos;
  #endif
  #if USE_TEXTURE
  v_uv0 = a_uv0;
  #endif
  v_color = a_color;
  gl_Position = pos;
}
    }%
    
    CCProgram fs %{
        
precision highp float;
#if USE_ALPHA_TEST
  uniform ALPHA_TEST {
    float alphaThreshold;
  };
#endif
void ALPHA_TEST (in vec4 color) {
  #if USE_ALPHA_TEST
      if (color.a < alphaThreshold) discard;
  #endif
}
void ALPHA_TEST (in float alpha) {
  #if USE_ALPHA_TEST
      if (alpha < alphaThreshold) discard;
  #endif
}
in vec4 v_color;
#if USE_TEXTURE
in vec2 v_uv0;
uniform sampler2D texture;
#endif
uniform color{
  vec4 imgColor;
};
uniform Properties {
  float radius;
};
void main () {
  vec4 accum = vec4(0.0);
  vec4 normal = vec4(0.0);
  normal = texture2D(texture, vec2(v_uv0.x, v_uv0.y));
  accum += texture2D(texture, vec2(v_uv0.x - radius, v_uv0.y - radius));
  accum += texture2D(texture, vec2(v_uv0.x + radius, v_uv0.y - radius));
  accum += texture2D(texture, vec2(v_uv0.x + radius, v_uv0.y + radius));
  accum += texture2D(texture, vec2(v_uv0.x - radius, v_uv0.y + radius));
  accum.r = imgColor.r * accum.a;
  accum.g = imgColor.g * accum.a;
  accum.b = imgColor.b * accum.a;
  accum.a = imgColor.a * accum.a;
  normal = accum * (1.0- normal.a) + normal;
  ALPHA_TEST(normal);
  gl_FragColor = normal*v_color;
}
    }%
    